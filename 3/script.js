'use strict';
// Реализовать аналог библиотеки Math (можно назвать MathX) с базовым набором функций, используя замыкания:
// вычисление N-го числа в ряду Фибоначчи 
// вычисление всех чисел в ряду Фибоначчи до числа N
// вычисление N-го простого числа
// вычисление всех простых чисел до числа N


let MathX = (function () {
    // Эта функция используется для определения, является ли число num простым числом. Она работает следующим образом:
    // Если число num меньше или равно 1, функция возвращает false, так как простые числа начинаются с 2 и больше.
    // Если число num меньше или равно 3, функция возвращает true, так как 2 и 3 сами по себе являются простыми числами.
    // Если число num делится на 2 или 3 без остатка, оно не является простым, и функция возвращает false.
    // В остальных случаях функция проверяет деление числа num на числа вида i и (i + 2) для i от 5 до квадратного корня из num. Если ни одно из этих делений не дает остатка, то число считается простым и возвращается true.
    function isPrime(num) {
        if (num <= 1) return false;
        if (num <= 3) return true;
        if (num % 2 === 0 || num % 3 === 0) return false;
        for (let i = 5; i * i <= num; i += 6) {
            if (num % i === 0 || num % (i + 2) === 0) return false;
        }
        return true;
    }

    // Эта функция вычисляет N-ое число в ряду Фибоначчи. Она использует итерацию, начиная с первых двух чисел (0 и 1), и затем в цикле вычисляет следующие числа в ряду, как сумму двух предыдущих. В конечном итоге, она возвращает N-ое число Фибоначчи.
    function fibonacci(n) {
        let a = 0, b = 1;
        for (let i = 2; i <= n; i++) {
            let temp = a + b;
            a = b;
            b = temp;
        }
        return a;
    }

    // Эта функция вычисляет все числа в ряду Фибоначчи, которые меньше или равны заданному числу N. Она также использует итерацию и сохраняет числа Фибоначчи в массиве, пока они не превысят N.
    function fibonacciSequence(N) {
        let sequence = [];
        let a = 0, b = 1;
        while (a <= N) {
            sequence.push(a);
            let temp = a + b;
            a = b;
            b = temp;
        }
        return sequence;
    }

    return {
        fib: fibonacci,
        fibSequence: fibonacciSequence,
        // Эта функция вычисляет N-ное простое число. Она начинает с числа 2 и последовательно проверяет числа на простоту, используя функцию isPrime. Как только она находит N-ное простое число, она его возвращает.
        nthPrime: function (n) {
            if (n <= 0) return undefined;
            let count = 0;
            let num = 2;
            while (count < n) {
                if (isPrime(num)) {
                    count++;
                    if (count === n) return num;
                }
                num++;
            }
        },
        //  Эта функция вычисляет все простые числа, которые меньше или равны заданному числу N. Она проходит через числа от 2 до N и проверяет их на простоту, используя функцию isPrime, и добавляет простые числа в массив.
        primeNumbers: function (N) {
            let primes = [];
            for (let i = 2; i <= N; i++) {
                if (isPrime(i)) {
                    primes.push(i);
                }
            }
            return primes;
        }
    };
})();
let N = 10; // Задайте необходимое значение N
console.log(`${N}-е число Фибоначчи:`, MathX.fib(N));
console.log("Числа Фибоначчи до", N, ":", MathX.fibSequence(N));
console.log(`${N}-е простое число:`, MathX.nthPrime(N));
console.log("Простые числа до", N, ":", MathX.primeNumbers(N));
